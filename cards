import random

clubs = list(range(1, 14))
spades = list(range(101, 114))
hearts = list(range(201, 214))
diamonds = list(range(301, 314))
deck = clubs + spades + hearts + diamonds


def royalflush(selectedcards):

    card1 = selectedcards[0]
    cardrange = list(range((card1-14), (card1+14)))
    for x in selectedcards:
        if x not in cardrange:
            return 0
    # checks if all cards are in same deck

    divfac = 100 * int(card1/100)
    numval = []
    for x in selectedcards:
        numval.append(x-divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirm = 0
    if 1 in numval:
        if 13 in numval:
            if 12 in numval:
                if 11 in numval:
                    if 10 in numval:
                        confirm = 1
    # checks for the specific values

    if confirm == 1:
        return 1
    else:
        return 0


def straightflush(selectedcards):

    card1 = selectedcards[0]
    cardrange = list(range((card1 - 14), (card1 + 14)))
    for x in selectedcards:
        if x not in cardrange:
            return 0
    # checks if all cards are in same deck

    divfac = 100 * int(card1/100)
    numval = []
    for x in selectedcards:
        numval.append(x-divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirm = []
    if numval[1] == (numval[0]+1):
        if numval[2] == (numval[1]+1):
            if numval[3] == (numval[2] + 1):
                if numval[4] == (numval[3] + 1):
                    confirm = 1

    if confirm == 1:
        return 1
    else:
        return 0


def fourofakind(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x/100)
        numval.append(x-divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirm = 0
    if numval.count(numval[2]) == 4:
        confirm = 1
    else:
        confirm = 0

    if confirm == 1:
        return 1
    else:
        return 0


def fullhouse(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x/100)
        numval.append(x-divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirmtoak = 0  # confirmtoak = confirm three of a kind
    if numval.count(numval[2]) == 3:
        confirmtoak = 1
        numremove = numval[2]
        numval.remove(numremove)
        numval.remove(numremove)
        numval.remove(numremove)
    else:
        confirmtoak = 0

    confirmp = 0  # confirmp = confirm pair
    if numval[0] == numval[1]:
        confirmp = 1
    else:
        confirmp = 0

    totconfirm = confirmtoak + confirmp

    if totconfirm == 2:
        return 1
    else:
        return 0


def flush(selectedcards):

    card1 = selectedcards[0]
    cardrange = list(range((card1 - 14), (card1 + 14)))
    for x in selectedcards:
        if x not in cardrange:
            return 0
    return 1


def straight(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x / 100)
        numval.append(x - divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirm = []
    if numval[1] == (numval[0] + 1):
        if numval[2] == (numval[1] + 1):
            if numval[3] == (numval[2] + 1):
                if numval[4] == (numval[3] + 1):
                    confirm = 1

    if confirm == 1:
        return 1
    else:
        return 0


def threeofakind(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x / 100)
        numval.append(x - divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    confirmtoak = 0  # confirmtoak = confirm three of a kind
    if numval.count(numval[2]) == 3:
        confirmtoak = 1
    else:
        confirmtoak = 0

    if confirmtoak == 1:
        return 1
    else:
        return 0


def twopair(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x / 100)
        numval.append(x - divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    numtests = []
    for x in numval:
        if numval.count(x) == 2:
            numtests.append(x)

    if len(numtests) == 4:
        return 1
    else:
        return 0


def onepair(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x / 100)
        numval.append(x - divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    numtests = []
    for x in numval:
        if numval.count(x) == 2:
            numtests.append(1)

    if 1 in numtests:
        return 1
    else:
        return 0


def highcard(selectedcards):

    numval = []
    for x in selectedcards:
        divfac = 100 * int(x / 100)
        numval.append(x - divfac)
    numval = sorted(numval)
    # takes all numbers down to same level

    if numval[0] == 1:
        return 1
    else:
        return numval[4]


def check(selectedcards):

    test1 = royalflush(selectedcards)
    test2 = straightflush(selectedcards)
    test3 = fourofakind(selectedcards)
    test4 = fullhouse(selectedcards)
    test5 = flush(selectedcards)
    test6 = straight(selectedcards)
    test7 = threeofakind(selectedcards)
    test8 = twopair(selectedcards)
    test9 = onepair(selectedcards)
    test10 = highcard(selectedcards)

    tests = [test1, test2, test3, test4, test5, test6, test7, test8, test9, test10]

    highestsuccess = []
    labels = ["Royal Flush", "Straight Flush", "Four of a Kind", "Full House", "Flush", "Straight", "Three of a Kind",
              "Two Pair", "Pair"]
    if 1 in tests[0:9]:
        highestsuccess = tests.index(1)
        print("Congratulations, you have a", labels[highestsuccess])
    else:
        if tests[9] == 1:
            print("Congratulations, your highest card is an Ace")
        if tests[9] == 11:
            print("Congratulations, your highest card is a Jack")
        if tests[9] == 12:
            print("Congratulations, your highest card is a Queen")
        if tests[9] == 13:
            print("Congratulations, your highest card is a King")
        if tests[9] in [2,3,4,5,6,7,8,9,10]:
            print("Congratulations, your highest card is a", tests[9])
    return ("")


selectedcards = []
for x in range(5):
    selectedcards.append(deck[random.randint(0, 51)])

print("Your cards are:")
print("")
for x in selectedcards:
    type = ""
    if x in range(0, 14):
        type = "Clubs"
    if x in range(100, 114):
        type = "Spades"
    if x in range(200, 214):
        type = "Heart"
    if x in range(300, 314):
        type = "Diamonds"


    divfac = 100 * int(x / 100)
    x =(x - divfac)

    value = 0
    if x == 1:
        value = "Ace"
    if x == 11:
        value = "Jack"
    if x == 12:
        value = "Queen"
    if x == 13:
        value = "King"
    if x in [2, 3, 4, 5, 6, 7, 8, 9, 10]:
        value = x
    print(value, "of", type)

print("")
print(check(selectedcards))

