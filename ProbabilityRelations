import random

TrueData = []
DataSetSize = 100000

# data set generation

i = 1
for i in range(DataSetSize):
    TrueData.append(0)
    i = i+1

AntibodyGenerationCount = DataSetSize*(0.01)

i = 1
while i <= AntibodyGenerationCount:
    PositiveAntibodyLocation = random.randint(0, (DataSetSize-1))
    TrueData[PositiveAntibodyLocation] = 1
    i = i+1

print("data set size: ", len(TrueData))
print("people positive for antibodies: ", TrueData.count(1))
print("data set: ", TrueData)

# antibody test

PercentageList = list(range(1, 101))
# print(PercentageList)

TestedPositive = []
TestedNegative = []

for x in TrueData:

    if x == 0:
        RandomPercentage = random.choice(PercentageList)
        if RandomPercentage <= 95:  # gives a positive result even though false for 5% of cases
            TestedNegative.append(x)
        else:
            TestedPositive.append(x)

    elif x == 1:
        RandomPercentage = random.choice(PercentageList)
        if RandomPercentage <= 99:  # gives a positive result for the cases 99% of the time
            TestedPositive.append(x)
        else:
            TestedNegative.append(x)

    else:
        print("data value at location", x, " in TrueData list is not a '1' or '0'")

PositiveTP = TestedPositive.count(1)
NegativeTP = TestedPositive.count(0)
PositiveTN = TestedNegative.count(1)
NegativeTN = TestedNegative.count(0)
print("TestedPositive: 'positive' = ", PositiveTP, "'negative' = ", NegativeTP)
print("TestedNegative: 'positive' = ", PositiveTN, "'negative' = ", NegativeTN)
print("Sum PTP, NTP, PTN, NTN : ", PositiveTP+PositiveTN+NegativeTN+NegativeTP)
print("positives that tested positive: ", (PositiveTP/len(TestedPositive)))
print("negatives that tested positive: ", (NegativeTP/len(TestedPositive)))
# print("positives that tested negative: ", (PositiveTN/len(TestedNegative)))
# print("negatives that tested negative: ", (NegativeTN/len(TestedNegative)))

    # print("Antibody Freq: ", AntibodyGenerationCount/DataSetSize, "Positive Tests: ",
    #       len(TestedPositive), "Dataset Size", DataSetSize, "Positive Test Freq: ", (len(TestedPositive))/DataSetSize)
    # o = o + 1
